// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios15.4 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name CamcoderKit
import AVFoundation
import Accelerate
@_exported import CamcoderKit
import Combine
import CoreImage
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers final public class Camcoder : ObjectiveC.NSObject {
  final public let previewStream: Combine.PassthroughSubject<CoreImage.CIImage, Swift.Never>
  @objc override dynamic public init()
  public enum CamcoderError : Swift.Error {
    case unAuthorized
    case cameraIsRunning
    case cameraIsNotConfigured
    case cameraIsAlreadyConfigured
    case sessionConfigFailed
    public static func == (a: CamcoderKit.Camcoder.CamcoderError, b: CamcoderKit.Camcoder.CamcoderError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  #if compiler(>=5.3) && $AsyncAwait
  final public func configure(camera: CamcoderKit.CameraSpec) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func resume() async throws
  #endif
  final public func stop() throws
  final public func terminate()
  @objc deinit
  final public var orientation: CamcoderKit.Orientation {
    get
    set
  }
}
extension CamcoderKit.Camcoder : AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @objc final public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
}
public enum Orientation {
  case portrait
  case portraitUpSideDown
  case landscapeLeft
  case landscapeRight
  public static func == (a: CamcoderKit.Orientation, b: CamcoderKit.Orientation) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension CoreMedia.CMFormatDescription : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public struct CameraSpec {
  public let position: AVFoundation.AVCaptureDevice.Position
  public let width: Swift.Int32
  public let height: Swift.Int32
  public let maxFPS: Swift.Int
  public init(position: AVFoundation.AVCaptureDevice.Position, width: Swift.Int32, height: Swift.Int32, maxFPS: Swift.Int)
}
extension CamcoderKit.Camcoder.CamcoderError : Swift.Equatable {}
extension CamcoderKit.Camcoder.CamcoderError : Swift.Hashable {}
extension CamcoderKit.Orientation : Swift.Equatable {}
extension CamcoderKit.Orientation : Swift.Hashable {}
