// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name SimpleCamPreviewKit
import AVFoundation
import Accelerate
import Combine
import CoreGraphics
import CoreImage
import Foundation
import Swift
import SwiftUI
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @objc public class SimpleCamPreviewKitResources : ObjectiveC.NSObject {
  @objc public class var bundle: Foundation.Bundle {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
public struct CameraSpec {
  public let position: AVFoundation.AVCaptureDevice.Position
  public let width: Swift.Int32
  public let height: Swift.Int32
  public let maxFPS: Swift.Int
  public let deviceType: AVFoundation.AVCaptureDevice.DeviceType
  public init(position: AVFoundation.AVCaptureDevice.Position, width: Swift.Int32, height: Swift.Int32, maxFPS: Swift.Int, deviceType: AVFoundation.AVCaptureDevice.DeviceType = .builtInWideAngleCamera)
}
public struct CameraView : SwiftUI.View {
  public init(image: SwiftUI.Image?)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s19SimpleCamPreviewKit10CameraViewV4bodyQrvp", 0) __
}
public enum CameraViewModelError : Swift.Error {
  case unAuthorized
  case cameraIsNotConfigured
  case cameraIsAlreadyConfigured
  case other(any Foundation.LocalizedError)
  case unknown
}
@available(iOS 13.0, *)
final public class CameraViewModel : Foundation.ObservableObject {
  @Combine.Published @_projectedValueProperty($currentFrame) final public var currentFrame: SwiftUI.Image? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  final public var $currentFrame: Combine.Published<SwiftUI.Image?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  final public var aspectRatio: Swift.Float {
    get
  }
  final public var imageStream: Combine.AnyPublisher<CoreImage.CIImage, Swift.Never> {
    get
  }
  public init(cameraSpec: SimpleCamPreviewKit.CameraSpec, orientation: SimpleCamPreviewKit.Orientation)
  #if compiler(>=5.3) && $AsyncAwait
  final public func configCamera() async throws
  #endif
  final public func update(camerOrientation: SimpleCamPreviewKit.Orientation)
  final public func terminate()
  @objc deinit
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
}
public enum Orientation : Swift.Int, Swift.CaseIterable, Swift.CustomStringConvertible {
  case portrait
  case portraitUpSideDown
  case landscapeLeft
  case landscapeRight
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [SimpleCamPreviewKit.Orientation]
  public typealias RawValue = Swift.Int
  public static var allCases: [SimpleCamPreviewKit.Orientation] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
extension SimpleCamPreviewKit.CameraSpec {
  public var isAvailable: Swift.Bool {
    get
  }
}
@available(iOS 13.0, macOS 12.4, *)
extension CoreMedia.CMFormatDescription : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension SimpleCamPreviewKit.Orientation : Swift.Equatable {}
extension SimpleCamPreviewKit.Orientation : Swift.Hashable {}
extension SimpleCamPreviewKit.Orientation : Swift.RawRepresentable {}
